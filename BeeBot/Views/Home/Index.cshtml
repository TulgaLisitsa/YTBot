@model YTBot.Models.ViewModels.DashboardViewModel

<div class="">

    <!-- Example row of columns -->
    <div class="row">
        <div class="col-md-2">
            <h4 class="">Menu</h4>
            <div class="btn-group-vertical menuButtons">
                <button type="button" class="btn btn-primary-outline" id="chatToggleButton">Chat</button>
                <button type="button" class="btn btn-primary-outline" id="consoleToggleButton">Console</button>
                <button type="button" class="btn btn-primary-outline" id="usersToggleButton">Users</button>
                <button type="button" class="btn btn-primary-outline" id="loyaltyToggleButton">Loyalty points</button>
                <button type="button" class="btn btn-primary-outline" id="chatPrefsToggleButton">Chat prefs</button>
                <button type="button" class="btn btn-primary-outline" id="triggersToggleButton">Triggers</button>
                <button type="button" class="btn btn-primary-outline" id="timersToggleButton">Timers</button>
                <button type="button" class="btn btn-primary-outline" id="pollsToggleButton">Polls</button>


            </div>
        </div>
        <div class="col">
            <div class="card botStatusCard">
                <div class="card card-block">
                    <h4 class="card-title"><i class="fa fa-window-minimize"></i> Bot controls</h4>
                    <div class="btn-group botButtons">
                        <button id="botConnectButton" type="button" class="btn btn-success" data-username="@Model.BotUserSettings.BotUsername" data-password="@Model.BotUserSettings.BotPassword" data-channel="@Model.BotUserSettings.BotChannel"><i class="fa fa-plug"></i> Connect</button>
                        <button id="botReconnectButton" type="button" class="btn btn-secondary" data-username="@Model.BotUserSettings.BotUsername" data-password="@Model.BotUserSettings.BotPassword" data-channel="@Model.BotUserSettings.BotChannel"><i class="fa fa-plug"></i> Re-connect</button>
                        <button id="botDisconnectButton" type="button" class="btn btn-warning"><i class="fa fa-window-close"></i> Disconnect</button>
                    </div>
                    <div class="">
                        <div>
                            <span id="botMsg" class="badge badge-default dontshow"></span>
                        </div>
                        <div>
                            <span id="botWarningMsg" class="badge badge-warning dontshow"></span>
                        </div>
                        <div>
                            <span id="botinfoMsg" class="badge badge-info dontshow"></span>
                        </div>
                    </div>

                </div>
            </div>
            <div class="card consoleStatusCard">
                <div class="card card-block">
                    <h4 class="card-title"><i class="fa fa-window-minimize"></i> Console</h4>
                    <div class="consoleLog pre-scrollable">

                    </div>

                </div>
            </div>
            <div class="card usersStatusCard">
                <div class="card card-block">
                    <h4 class="card-title"><i class="fa fa-window-minimize"></i> Users</h4>
                    <div class="usersCard">
                        <div class="usersCount">
                            0
                        </div>
                        <div class="usersConnInfo pre-scrollable">

                        </div>

                    </div>

                </div>
            </div>
            <div class="card loyaltyCard">
                <div class="card card-block">
                    <h4 class="card-title"><i class="fa fa-window-minimize"></i> Loyalty points</h4>
                    <form id="loyaltyForm">
                        <div class="card-text">
                            <div class="form-check">
                                <label class="form-check-label">
                                    @{
                                        var track = "";
                                        if (Model.LoyaltySettings.Track != null)
                                        {
                                            if (Model.LoyaltySettings.Track == true)
                                            {
                                                track = "checked";
                                            }
                                        }
                                    }
                                    <input class="form-check-input" type="checkbox" id="track" name="track" @track value="1">
                                    Track loyalty
                                </label>
                            </div>
                            <div class="row">
                                <div class="col-5">
                                    <label for="loyaltyName">Loyaltyname</label>
                                </div>
                                <div class="col-4">
                                    <input id="loyaltyName" name="loyaltyName" type="text" class="form-control" placeholder="" value="@Model.LoyaltySettings.LoyaltyName">
                                </div>

                            </div>
                            <div class="row">
                                <div class="col-5">
                                    <label for="loyaltyValue">Give users</label>
                                </div>
                                <div class="col-2">
                                    <input type="text" id="loyaltyValue" name="loyaltyValue" class="form-control" placeholder="" value="@Model.LoyaltySettings.LoyaltyValue">
                                </div>
                                <div class="col-2">
                                    <p>units</p>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-5">
                                    <label for="loyaltyValue">Every </label>
                                </div>
                                <div class="col-2">
                                    <input type="text" id="loyaltyInterval" name="loyaltyInterval" class="form-control" placeholder="" value="@Model.LoyaltySettings.LoyaltyInterval">
                                </div>
                                <div class="col-2">
                                    <p>minute</p>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md">
                                    <button type="button" id="btnLoyaltySave" class="btn btn-info float-right"><i class="fa fa-save"></i> Save</button>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
            <div class="card chatPrefsCard">
                <div class="card card-block">
                    <h4 class="card-title"><i class="fa fa-window-minimize"></i> Chat prefs</h4>
                    <p class="card-text"></p>

                </div>
            </div>
            <div class="card triggersCard">
                <div class="card card-block">
                    <h4 class="card-title"><i class="fa fa-window-minimize"></i> Triggers</h4>
                    <p class="card-text"></p>


                </div>
            </div>
            <div class="card timersCard">
                <div class="card card-block">
                    <h4 class="card-title"><i class="fa fa-window-minimize"></i> Timers</h4>
                    <p class="card-text"></p>


                </div>
            </div>
            <div class="card pollsCard">
                <div class="card card-block">
                    <h4 class="card-title"><i class="fa fa-window-minimize"></i> Polls</h4>
                    <p class="card-text"></p>


                </div>
            </div>


        </div>
        <div class="col">
            <div class="col-md streamCard" style="overflow: visible !important">
                <div class="card streamCardDiv" style="overflow: visible !important">
                    <div class="card card-block" style="overflow: visible !important">
                        <h4 class="card-title"><i class="fa fa-window-minimize"></i> Stream</h4>
                        <div class="card-text">
                            @*<form action="#" method="post">
                                <fieldset class="form-group">
                                    <label for="streamTitle">Title</label>
                                    <input type="text" class="form-control" id="streamTitle" name="streamTitle">
                                    <label for="streamGame">Game</label>
                                    <input type="text" class="form-control" id="streamGame" name="streamGame">
                                </fieldset>
                                <fieldset class="form-group">
                                    
                                </fieldset>
                                <button type="button" class="btn btn-info float-right">Save</button>
                            </form>*@
                            
                            <form action="#" class="form-inline">
                                <label class="mr-sm-1 mb-0" for="streamTitle">Title</label>
                                <input type="text" class="form-control mr-sm-1 mb-2 mb-sm-0 col-sm-6" id="streamTitle" name="streamTitle">
                                <label class="mr-sm-1 mb-0" for="last_name">Game</label>
                                <input type="text" class="form-control mr-sm-1 mb-2 mb-sm-0 col-sm" id="streamGame" name="streamGame" style="z-index: 300000 !important;">
                                <button id="streamInfoSaveButton" type="button" class="btn btn-info mt-2 mt-sm-0"><i class="fa fa-save"></i> Save</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md chatCard" style="z-index: -3000 !important;">
                <div class="card chatCardDiv">
                    <div class="card card-block">
                        <h4 class="card-title"><i class="fa fa-window-minimize"></i> Chat</h4>
                        <div class="chatText pre-scrollable">

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<script type="text/javascript">
    $(document).ready(function () {

        $("#chatToggleButton").click(function () {
            toggleButton(this);
            $(".chatCard").toggle();
        });
        $("#consoleToggleButton").click(function () {
            toggleButton(this);
            $(".consoleStatusCard").toggle();
        });
        $("#usersToggleButton").click(function () {
            toggleButton(this);
            $(".usersStatusCard").toggle();
        });
        $("#loyaltyToggleButton").click(function () {
            toggleButton(this);
            $(".loyaltyCard").toggle();
        });
        $("#chatPrefsToggleButton").click(function () {
            toggleButton(this);
            $(".chatPrefsCard").toggle();
        });
        $("#triggersToggleButton").click(function () {
            toggleButton(this);
            $(".triggersCard").toggle();
        });
        $("#timersToggleButton").click(function () {
            toggleButton(this);
            $(".timersCard").toggle();
        });
        $("#pollsToggleButton").click(function () {
            toggleButton(this);
            $(".pollsCard").toggle();
        });
        $("#chatTpollsToggleButtonoggleButton").click(function () {
            toggleButton(this);
            $(".chchatCardat").toggle();
        });


        // Make each header clickable so content is toggled
        $(".card-title").click(function () {
            $(this).next().toggle();
            $(this).find("i").toggleClass("fa-window-minimize").toggleClass("fa-window-maximize");

        });




        $("#btnLoyaltySave").click(function () {
            console.log("Clicked btnLoyaltySave");
            var loyaltyData = $("#loyaltyForm").serialize();

            $.ajax({
                type: "POST",
                url: "@Url.Action("LoyaltySave")",
                data: loyaltyData,
                dataType: "json",
                success: function (response) {
                    if (response.data == "1") {
                        $.amaran({
                            'theme': 'colorful',
                            'content'   :{
                                bgcolor:'#27ae60',
                                color:'#fff',
                                message: response.message,
                            },
                            'closeOnClick':false,
                            'inEffect':'slideTop',
                            'outEffect':'slideLeft'
                        });

                    } else {

                        $.amaran({
                            'theme': 'colorful',
                            'content': {
                                bgcolor: '##ff3300',
                                color: '#fff',
                                message: response.message,
                            },
                            'closeOnClick': false,
                            'inEffect': 'slideTop',
                            'outEffect': 'slideLeft'
                        });
                    }
                }
            });
        });

        $("#streamGame").easyAutocomplete(
            {
                adjustWidth: false,
                url: function(phrase) {
                    return "@Url.Action("GetGames", "Home")";
                },
                getValue: "Name",

                template: {
                    type: "custom",
                    method: function(value, item) {
                        return "<img src='" + item.Box.Small + "' /> " + item.Name;
                    }
                },
                ajaxSettings: {
                    dataType: "json",
                    method: "POST",
                    data: {
                        dataType: "json"
                    }
                },

                preparePostData: function(data) {
                    data.phrase = $("#streamGame").val();
                    return data;
                },
                requestDelay: 400
            }
        );


    });




    function toggleButton(elem) {
        $(elem).toggleClass("btn-primary-outline").toggleClass("btn-secondary");
    }


    (function () {
        // Defining a connection to the server hub.

        var twitchHub = $.connection.twitchHub;
        // Setting logging to true so that we can see whats happening in the browser console log. [OPTIONAL]

        $.connection.hub.logging = true;
        // Start the hub

        $.connection.hub.start();


        // This is the client method which is being called inside the MyHub constructor method every 3 seconds
        twitchHub.client.SendServerTime = function (serverTime) {
            // Set the received serverTime in the span to show in browser

            $(".chatText").append(serverTime + "<br>");
        };

        twitchHub.client.Hello = function (hello) {
            $(".chatText").append(hello + "<br>");
        };

        twitchHub.client.ChatShow = function (msg) {
            $(".chatText").append(msg);

            var objDiv = document.getElementsByClassName("chatText")[0];
            objDiv.scrollTop = objDiv.scrollHeight;
        };

        twitchHub.client.DonationShow = function (msg) {
            $(".chatText").append("<div class='donationMsg'>" + msg + "</span>");

            var objDiv = document.getElementsByClassName("chatText")[0];
            objDiv.scrollTop = objDiv.scrollHeight;
        };

        twitchHub.client.HostShow = function (msg) {
            $(".chatText").append("<div class='hostMsg'>" + msg + "</span>");

            var objDiv = document.getElementsByClassName("chatText")[0];
            objDiv.scrollTop = objDiv.scrollHeight;
        };

        twitchHub.client.ConsoleLog = function (log) {
            $(".consoleLog").append(log + "<br>");
            var objDiv = document.getElementsByClassName("consoleLog")[0];
            objDiv.scrollTop = objDiv.scrollHeight;
        };

        twitchHub.client.UsersConnLog = function (log) {
            var value = 0;

            if (log.indexOf("(connected)") != -1) {
                value = parseInt($(".usersCount").text()) + 1;
            }
            else if (log.indexOf("(disconnected)") != -1) {
                if (parseInt($(".usersCount").text()) > 0) {
                    value = parseInt($(".usersCount").text()) - 1;
                } else {
                    value = 0;
                }

            }

            console.log("Users: " + value.toString());

            $(".usersCount").text(value.toString());

            $(".usersConnInfo").append(log);
            var objDiv = document.getElementsByClassName("usersConnInfo")[0];
            objDiv.scrollTop = objDiv.scrollHeight;
        };

        twitchHub.client.BotStatus = function (connected) {
            console.log("BotStatus: " + connected);
            if (connected.message != "") {
                $("#botMsg").removeClass("dontshow").text(connected.message);
            }
            if (connected.warning != "") {
                $("#botWarningMsg").removeClass("dontshow").text(connected.warning);
            }
            if (connected.info != "") {
                $("#botinfoMsg").removeClass("dontshow").text(connected.info);
            }



        };

        twitchHub.client.StreamInfoSaveCallback = function(data, message) {
            if (data == "1") {
                $.amaran({
                    'theme': 'colorful',
                    'content'   :{
                        bgcolor:'#27ae60',
                        color:'#fff',
                        message: message,
                    },
                    'closeOnClick':false,
                    'inEffect':'slideTop',
                    'outEffect':'slideLeft'
                });

            } else {

                $.amaran({
                    'theme': 'colorful',
                    'content': {
                        bgcolor: '##ff3300',
                        color: '#fff',
                        message: message,
                    },
                    'closeOnClick': false,
                    'inEffect': 'slideTop',
                    'outEffect': 'slideLeft'
                });
            }
        }

        //Button click jquery handler
        $("#botConnectButton").click(function () {
            // Call SignalR hub method
            var username = $(this).data("username");
            var password = $(this).data("password");
            var channel = $(this).data("channel");

            twitchHub.server.connectBot(username, password, channel);
        });

        $("#botReconnectButton").click(function () {
            var username = $(this).data("username");
            var password = $(this).data("password");
            var channel = $(this).data("channel");
            twitchHub.server.reconnect(username, password, channel);
        });

        $("#botDisconnectButton").click(function () {
            // Call SignalR hub method

            twitchHub.server.disconnectBot();
        });

        $("#streamInfoSaveButton").click(function() {
            console.log("Clicked streamInfoSaveButton");

            var title = $("#streamTitle").val();
            var game = $("#streamGame").val();
            var channel = $("#botConnectButton").data("channel");
            twitchHub.server.saveStreamInfo(title, game, channel);

        });



    })()
</script>
